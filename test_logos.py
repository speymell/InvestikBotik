#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API
"""

import requests
import time

def test_clearbit_logos():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ Clearbit"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Clearbit Logo API...")
    
    company_domains = {
        'SBER': 'sberbank.com',
        'GAZP': 'gazprom.com', 
        'LKOH': 'lukoil.com',
        'YNDX': 'yandex.com',
        'ROSN': 'rosneft.com',
        'NVTK': 'novatek.ru',
        'TCSG': 'tinkoff.ru',
        'VTBR': 'vtb.ru',
        'GMKN': 'nornickel.com',
        'MTSS': 'mts.ru'
    }
    
    working_logos = []
    
    for ticker, domain in company_domains.items():
        try:
            logo_url = f"https://logo.clearbit.com/{domain}?size=96"
            response = requests.head(logo_url, timeout=3)
            
            if response.status_code == 200:
                print(f"‚úÖ {ticker}: {logo_url}")
                working_logos.append((ticker, logo_url))
            else:
                print(f"‚ùå {ticker}: {response.status_code}")
                
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        except Exception as e:
            print(f"‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
    
    print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: {len(working_logos)}/{len(company_domains)}")
    return working_logos

def test_fmp_logos():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ Financial Modeling Prep"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Financial Modeling Prep API...")
    
    international_tickers = {
        'SBER': 'SBER.ME',
        'GAZP': 'GAZP.ME',
        'LKOH': 'LKOH.ME', 
        'ROSN': 'ROSN.ME',
        'NVTK': 'NVTK.ME',
        'GMKN': 'GMKN.ME',
        'MTSS': 'MTSS.ME'
    }
    
    working_logos = []
    
    for ticker, international_ticker in international_tickers.items():
        try:
            fmp_url = f"https://financialmodelingprep.com/image-stock/{international_ticker}.png"
            response = requests.head(fmp_url, timeout=3)
            
            if response.status_code == 200:
                print(f"‚úÖ {ticker}: {fmp_url}")
                working_logos.append((ticker, fmp_url))
            else:
                print(f"‚ùå {ticker}: {response.status_code}")
                
            time.sleep(0.1)
            
        except Exception as e:
            print(f"‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
    
    print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: {len(working_logos)}/{len(international_tickers)}")
    return working_logos

def test_yahoo_finance_logos():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ Yahoo Finance"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yahoo Finance –ª–æ–≥–æ—Ç–∏–ø–æ–≤...")
    
    # Yahoo Finance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
    tickers = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'ROSN']
    working_logos = []
    
    for ticker in tickers:
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Yahoo Finance
            yahoo_urls = [
                f"https://s.yimg.com/cv/apiv2/default/20191101/{ticker}.png",
                f"https://logo.yahoo.com/api/resource/finance/logo/{ticker}",
                f"https://s.yimg.com/rz/d/yahoo_finance_en-US_s_f_pw_141x37_finance_2x.png"
            ]
            
            for url in yahoo_urls:
                response = requests.head(url, timeout=3)
                if response.status_code == 200:
                    print(f"‚úÖ {ticker}: {url}")
                    working_logos.append((ticker, url))
                    break
            else:
                print(f"‚ùå {ticker}: –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            time.sleep(0.1)
            
        except Exception as e:
            print(f"‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
    
    print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: {len(working_logos)}/{len(tickers)}")
    return working_logos

def test_alternative_apis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API...")
    
    tickers = ['SBER', 'GAZP', 'LKOH']
    working_logos = []
    
    for ticker in tickers:
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API
            apis = [
                f"https://api.logo.dev/{ticker}?token=free",
                f"https://img.logo.dev/{ticker}?token=free",
                f"https://logo.dev/{ticker}.png",
                f"https://companieslogo.com/img/orig/{ticker}.png"
            ]
            
            for api_url in apis:
                try:
                    response = requests.head(api_url, timeout=3)
                    if response.status_code == 200:
                        print(f"‚úÖ {ticker}: {api_url}")
                        working_logos.append((ticker, api_url))
                        break
                except:
                    continue
            else:
                print(f"‚ùå {ticker}: –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API")
                
            time.sleep(0.1)
            
        except Exception as e:
            print(f"‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
    
    print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: {len(working_logos)}/{len(tickers)}")
    return working_logos

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API")
    print("=" * 60)
    
    all_working_logos = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ API
    clearbit_logos = test_clearbit_logos()
    all_working_logos.extend(clearbit_logos)
    
    fmp_logos = test_fmp_logos()
    all_working_logos.extend(fmp_logos)
    
    yahoo_logos = test_yahoo_finance_logos()
    all_working_logos.extend(yahoo_logos)
    
    alt_logos = test_alternative_apis()
    all_working_logos.extend(alt_logos)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤: {len(all_working_logos)}")
    
    if all_working_logos:
        print("\n‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –ª–æ–≥–æ—Ç–∏–ø—ã:")
        for ticker, url in all_working_logos:
            print(f"   {ticker}: {url}")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Clearbit API - –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π")
        print(f"   –§–æ—Ä–º–∞—Ç: https://logo.clearbit.com/{{domain}}?size=96")
    else:
        print("\n‚ùå –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UI Avatars –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
