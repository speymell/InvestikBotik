"""
WSGI —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å Gunicorn –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ WSGI —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import os
import logging
from app import create_app
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app = create_app('production')

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö
        from database import Stock
        from stock_api import stock_api_service
        
        existing_stocks_count = Stock.query.count()
        
        if existing_stocks_count == 0:
            logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö...")
            try:
                result = stock_api_service.sync_stocks_to_database()
                if result and result.get('success'):
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {result['total']} –∞–∫—Ü–∏–π —Å MOEX")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MOEX, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            logger.info(f"üìä –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_stocks_count} –∞–∫—Ü–∏–π")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ fallback –¥–∞–Ω–Ω—ã–µ
        try:
            if Stock.query.count() == 0:
                from stock_api import stock_api_service
                fallback_stocks = stock_api_service._get_fallback_stocks()
                
                for stock_data in fallback_stocks[:5]:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
                    stock = Stock(
                        ticker=stock_data['ticker'],
                        name=stock_data['name'],
                        price=stock_data['price'],
                        sector=stock_data['sector'],
                        description=stock_data['description'],
                        logo_url=stock_data.get('logo_url', '')
                    )
                    db.session.add(stock)
                
                db.session.commit()
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö")
        except Exception as fallback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö: {fallback_error}")

if __name__ == "__main__":
    app.run()
